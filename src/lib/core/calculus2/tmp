nat :: Type := | O :: nat | S :: nat -> nat

vector (A :: Type) :: nat -> Type :=
| [[]] :: vector A O
| (:) : right, 30 :: A -> {n :: nat} -> vector A n -> vector A (S n)

map :: {A B:: Type} -> {n :: nat} -> (A -> B) -> vector A n -> vector B n
map := \ {A} {B} {n :: nat} (f :: A -> B) (v :: vector A n) ->
       match v with
         | [] {A' :: Type} := [] {A' :: Type}
	  (with [] {A'} == v & vector A' 0 == vector A n) 
	 | (:) {A' :: Type} (hd :: A') {n' :: nat} (tl :: vector A' n') := 
	   (:) {A'} (f hd) {n'} (map 
	  (with (:) {A'} hd {n'} tl & vector A' (S n') == vector A n))	  
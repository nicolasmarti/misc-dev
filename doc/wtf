*********************************************

Term / Type: - Type
       	     - QVar, FVar, PVar
	     - Cste, DVar, 
	     - Obj
	     - Lambda
	     - Let
	     - Forall
	     - App
	     - MatchWith 

Definition: - Axiom
	    - Inductive, Constructor
	    - Equation
	    - Class, Object
	    - TypeClass, TypeInstance
	    - Interface, Instance
	    - Module
	    - Relation/Predicate/Mode, Rules, Request

Store: - Definitions
       - Dependance Store
       - DataBase

*********************************************

*) Higher Order Type (type === term)
*) Function, application are first order value
*) Pattern matching (any term) / Destruction (only application of constructor of inductive types and variable)
*) predicate on type (typeclass & interface): build inductives type (with type as parameter), functions (with inductive type on type as implicit argument), oracle for the inductive (on typeinstance)

*********************************************

<symbol> :: <term>

<pattern> := <term>

Inductive <symbol> <arg>* [:: <type>] :=
(| <symbol> :: <term>)*

Class <symbol> <arg>* where
  <def>

